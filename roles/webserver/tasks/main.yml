---
- name: Install apt package
  sudo: yes
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  with_items:
   - git
   - libjpeg-dev
   - libpq-dev
   - memcached
   - nginx
   - postgresql
   - python-dev
   - python-pip
   - python-psycopg2
   - python-setuptools
   - python-virtualenv
   - supervisor

- name: check out the repository on the host
  git: repo={{ repo_url }} dest={{ proj_path }} accept_hostkey=yes

- name: install the required python package
  pip: name={{ item }} virtualenv={{ venv_path }}
  with_items: 
   - mezzanine
   - gunicorn
   - setproctitle
   - south
   - psycopg2
   - django-compressor
   - python-memcached

- name: running freeze
  pip: name=pip state=present virtualenv={{ venv_path }}

- name: install requirements.txt
  pip: requirements={{ proj_path }}/{{ reqs_path }} virtualenv={{ venv_path }}

- name: create user
  sudo: yes
  sudo_user: postgres
  postgresql_user: 
    name: "{{ database_user }}"
    password: "{{ db_pass }}"

- name: create database
  sudo: yes 
  sudo_user: postgres
  postgresql_db: 
    name: "{{ database_name }}"
    owner: "{{ database_user }}"
    encoding: UTF8
    lc_ctype: "{{ locale }}"
    lc_collate: "{{ locale }}"
    template: template0

- name: generate the settings files
  template: src=templates/local_settings.py.j2 dest={{ proj_path }}/local_settings.py

- name: sync the database, apply migrations, collect static content
  django_manage:
    command: "{{ item }}"
    app_path: "{{ proj_path }}"
    virtualenv: "{{ venv_path }}"
  with_items:
    - syncdb

- name: set the side id 
  script: scripts/setside.py
  environment: 
    PATH: "{{ venv_path }}/bin"
    PROJECT_DIR: "{{ proj_path }}"
    WEBSITE_DOMAIN: "{{ live_hostname }}"

- name: set admin password
  script: scripts/setadmin.py
  environment: 
    PATH: "{{ venv_path }}/bin"
    PROJECT_DIR: "{{ proj_path }}"
    ADMIN_PASSWORD: "{{ admin_pass }}"

- name: set the gunicorn configuration files
  template: 
    src=templates/gunicorn.conf.py.j2 
    dest={{proj_path}}/gunicorn.conf.py 

- name: set the supervisor configuration file
  sudo: yes
  template: 
    src=templates/supervisor.conf.j2
    dest=/etc/supervisor/conf.d/mezzanine.conf
  notify: restart supervisor

- name: set the nginx configuration file
  sudo: yes
  template: 
    src=templates/nginx.conf.j2
    dest=/etc/nginx/sites-available/mezzanine.conf
  notify: restart nginx

- name: enable the nginx config file
  sudo: yes
  file: 
    src: /etc/nginx/sites-available/mezzanine.conf
    dest: /etc/nginx/sites-enabled/mezzanine.conf
    state: link
  notify: restart nginx

- name: remove the default nginx config file
  sudo: yes
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx

- name: ensure config path exists
  file: path={{ conf_path }} state=directory
  sudo: True
  when: tls_enabled

- name: create tls certificates
  command: >
    openssl req -new -x509 -nodes -out {{ proj_name }}.crt
    -keyout {{ proj_name }}.key -subj '/CN={{ domains[0] }}' -days 3650
    chdir={{ conf_path }}
    creates={{ conf_path }}/{{ proj_name }}.crt
  sudo: True
  when: tls_enabled
  notify: restart nginx

- name: install poll twitter cron job
  cron: name="poll twitter" minute="*/5" user={{ user }}
    job="{{ manage }} poll_twitter"









